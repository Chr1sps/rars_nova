package rars.events

import rars.events.EventReason.*
import rars.util.toHexStringWithPrefix

/**
 * Represents AddressErrorException. This is generated by the simulator when the
 * source code references a memory address not valid for the context.
 *
 * @author Pete Sanderson
 * @version August 2003
 */
class MemoryError(
    message: String,
    reason: EventReason,
    val address: Int
) {
    // SimulationException.(STORE|LOAD|INSTRUCTION)_(ADDRESS_MISALIGNED|ACCESS_FAULT)
    val reason: EventReason = when (reason) {
        INSTRUCTION_ACCESS_FAULT,
        INSTRUCTION_ADDR_MISALIGNED,
        LOAD_ACCESS_FAULT,
        LOAD_ADDRESS_MISALIGNED,
        STORE_ACCESS_FAULT,
        STORE_ADDRESS_MISALIGNED -> reason
        else -> error("This exception reason is not allowed.")
    }
    val message = "$message ${address.toHexStringWithPrefix()}"
}
