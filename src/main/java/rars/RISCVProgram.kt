package rars

import arrow.core.Either
import arrow.core.raise.either
import rars.assembler.*
import rars.assembler.Tokenizer.Companion.tokenize
import rars.exceptions.AssemblyError
import rars.simulator.BackStepper
import java.io.BufferedReader
import java.io.File
import java.io.FileReader

/*
Copyright (c) 2003-2006,  Pete Sanderson and Kenneth Vollmar

Developed by Pete Sanderson (psanderson@otterbein.edu)
and Kenneth Vollmar (kenvollmar@missouristate.edu)

Permission is hereby granted, free of charge, to any person obtaining 
a copy of this software and associated documentation files (the 
"Software"), to deal in the Software without restriction, including 
without limitation the rights to use, copy, modify, merge, publish, 
distribute, sublicense, and/or sell copies of the Software, and to 
permit persons to whom the Software is furnished to do so, subject 
to the following conditions:

The above copyright notice and this permission notice shall be 
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR 
ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION 
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

(MIT license, http://www.opensource.org/licenses/mit-license.html)
 */
/**
 * Internal representations of the program. Connects source, tokens and machine
 * code. Having
 * all these structures available facilitates construction of good messages,
 * debugging, and easy simulation.
 *
 * @author Pete Sanderson
 * @version August 2003
 */
class RISCVProgram {
    var file: File? = null
        private set
    var source: String? = null
    var sourceList: List<String>? = null
        private set

    /**
     * Produces list of tokens that comprise the program.
     *
     * @return ArrayList of TokenList. Each TokenList is list of tokens generated by
     * corresponding line of RISCV source code.
     * @see TokenList
     */
    var tokenList: List<TokenList>? = null
        private set

    /**
     * Produces existing list of parsed source code statements.
     *
     * @return ArrayList of ProgramStatement. Each ProgramStatement represents a
     * parsed RISCV statement.
     * @see ProgramStatement
     */
    @JvmField
    var parsedList: List<ProgramStatement>? = null
    private var machineList: List<ProgramStatement>? = null

    /**
     * Returns BackStepper associated with this program. It is created upon
     * successful assembly.
     *
     * @return BackStepper object, null if there is none.
     */
    var backStepper: BackStepper? = null
        private set

    /**
     * Returns SymbolTable associated with this program. It is created at assembly
     * time,
     * and stores local labels (those not declared using .globl directive).
     *
     * @return a [SymbolTable] object
     */
    var localSymbolTable: SymbolTable? = null
        private set
    private var macroPool: MacroPool? = null

    /**
     * Retrieve list of source statements that comprise the program.
     *
     * @return ArrayList of SourceLine.
     * Each SourceLine represents one line of RISCV source code
     */
    var sourceLineList: List<SourceLine>? = null
        /**
         * Set list of source statements that comprise the program.
         *
         * @param sourceLineList
         * ArrayList of SourceLine.
         * Each SourceLine represents one line of RISCV source
         * code.
         */
        set(sourceLineList) {
            field = sourceLineList
            this.sourceList = sourceLineList!!.map(SourceLine::source)
        }

    /**
     * Produces list of machine statements that are assembled from the program.
     *
     * @return ArrayList of ProgramStatement. Each ProgramStatement represents an
     * assembled
     * basic RISCV instruction.
     * @see ProgramStatement
     */
    fun getMachineList(): List<ProgramStatement> = this.machineList!!

    /**
     * Produces specified line of RISCV source program.
     *
     * @param i
     * Line number of RISCV source program to get. Line 1 is first line.
     * @return Returns specified line of RISCV source. If outside the line range,
     * it returns null. Line 1 is first line.
     */
    fun getSourceLine(i: Int): String? = if ((i >= 1) && (i <= this.sourceList!!.size)) {
        this.sourceList!![i - 1]
    } else {
        null
    }

    /**
     * Reads RISCV source code from a string into structure.
     *
     * @param source
     * String containing the RISCV source code.
     */
    fun fromString(source: String) {
        this.file = null
        this.source = source
        this.sourceList =
            listOf(*source.split("\n".toRegex()).dropLastWhile { it.isEmpty() }.toTypedArray())
    }

    /**
     * Reads RISCV source code from file into structure. Will always read from file.
     * It is GUI responsibility to assure that source edits are written to file
     * when user selects compile or run/step options.
     *
     * @param file
     * String containing name of RISCV source code file.
     * @throws AssemblyError
     * Will throw exception if there is any problem
     * reading the file.
     */
    fun readSource(file: File): Either<AssemblyError, Unit> = either {
        this@RISCVProgram.file = file
        try {
            BufferedReader(FileReader(file)).use { inputFile ->
                source = inputFile.readText()
                sourceList = buildList {
                    this@RISCVProgram.source!!.lines().forEach { line ->
                        add(line)
                    }
                }
            }
        } catch (e: Exception) {
            val errors = ErrorList()
            errors.add(ErrorMessage.error(null, 0, 0, e.toString()))
            raise(AssemblyError(errors))
        }
    }

    /**
     * Tokenizes the RISCV source program. Program must have already been read from
     * file.
     *
     * @throws AssemblyError
     * Will throw exception if errors occurred while
     * tokenizing.
     */
    fun tokenize(): Either<AssemblyError, Unit> = either {
        tokenList = tokenize(this@RISCVProgram).bind()
        this@RISCVProgram.localSymbolTable =
            SymbolTable(this@RISCVProgram.file, Globals.GLOBAL_SYMBOL_TABLE) // prepare for assembly
    }

    /**
     * Prepares the given list of files for assembly. This involves
     * reading and tokenizing all the source files. There may be only one.
     *
     * @param files
     * ArrayList containing the source file name(s) in no
     * particular order
     * @param leadFile
     * String containing name of source file that needs to
     * go first and
     * will be represented by "this" RISCVprogram object.
     * @param exceptionHandler
     * String containing name of source file containing
     * exception
     * handler. This will be assembled first, even ahead of
     * leadFilename, to allow it to
     * include "startup" instructions loaded beginning at
     * 0x00400000. Specify null or
     * empty String to indicate there is no such designated
     * exception handler.
     * @return ArrayList containing one RISCVprogram object for each file to
     * assemble.
     * objects for any additional files (send ArrayList to assembler)
     * @throws AssemblyError
     * Will throw exception if errors occurred while
     * reading or tokenizing.
     */
    fun prepareFilesForAssembly(
        files: List<File>,
        leadFile: File,
        exceptionHandler: File?
    ): Either<AssemblyError, List<RISCVProgram>> = either {
        val programsToAssemble = mutableListOf<RISCVProgram>()
        val leadFilePosition = if (exceptionHandler == null) 0 else 1
        for (file in files) {
            val prepareeProgram = if (file == leadFile) this@RISCVProgram else RISCVProgram()
            prepareeProgram.readSource(file).bind()
            prepareeProgram.tokenize().bind()
            // I want "this" RISCVprogram to be the first in the list...except for exception
            // handler
            if (prepareeProgram == this@RISCVProgram && !programsToAssemble.isEmpty()) {
                programsToAssemble.add(leadFilePosition, prepareeProgram)
            } else {
                programsToAssemble.add(prepareeProgram)
            }
        }
        programsToAssemble
    }

    /**
     * Assembles the RISCV source program. All files comprising the program must
     * have
     * already been tokenized.
     *
     * @param programsToAssemble
     * ArrayList of RISCVprogram objects, each
     * representing a tokenized source file.
     * @param extendedAssemblerEnabled
     * A boolean value - true means extended
     * (usePseudoInstructions) instructions
     * are permitted in source code and false means
     * they are to be flagged as errors
     * @param warningsAreErrors
     * A boolean value - true means assembler
     * warnings will be considered errors and
     * terminate
     * the assemble; false means the assembler will
     * produce warning message but otherwise ignore
     * warnings.
     * @return ErrorList containing nothing or only warnings (otherwise would have
     * thrown exception).
     * @throws AssemblyError
     * Will throw exception if errors occurred while
     * assembling.
     */
//    @Throws(AssemblyException::class)
    fun assemble(
        programsToAssemble: List<RISCVProgram>,
        extendedAssemblerEnabled: Boolean,
        warningsAreErrors: Boolean
    ): Either<AssemblyError, ErrorList> = either {
        backStepper = null
        val assemblyResult = Assembler.assemble(
            programsToAssemble,
            extendedAssemblerEnabled,
            warningsAreErrors
        ).bind()
        this@RISCVProgram.machineList = assemblyResult.first
        this@RISCVProgram.backStepper = BackStepper()
        assemblyResult.second
    }

    /**
     * Instantiates a new [MacroPool] and sends reference of this
     * [RISCVProgram] to it
     *
     * @return instatiated MacroPool
     * @author M.H.Sekhavat &lt;sekhavat17@gmail.com&gt;
     */
    fun createMacroPool(): MacroPool {
        this.macroPool = MacroPool(this)
        return this.macroPool!!
    }

    var localMacroPool: MacroPool? by this::macroPool
}

